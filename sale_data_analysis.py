# -*- coding: utf-8 -*-
"""sale data analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12ozz3O7SQlyJeuEozrHMTovM9OH7aAXB
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler, OneHotEncoder

df=pd.read_csv('/content/retail_sales_dataset.csv')
print(df.head())

df.dtypes

df.describe()

missing_values= df.isnull().sum()
duplicted_values=df.duplicated().sum()
print(missing_values)
print(f'dataset has {duplicted_values} duplicates')

print("Number of unique values :")
print(f": {df.nunique()} unique values")

df['Date'] = pd.to_datetime(df['Date'])

gender_distribution = df['Gender'].value_counts()

plt.figure(figsize=(10,6))
gender_distribution.plot(kind='pie', autopct='%1.1f%%', colors=['#F765A3', '#165BAA'])
plt.title('Gender Distribution')
plt.ylabel('')
plt.legend(labels=gender_distribution.index, title='Gender', loc='best')
plt.show()

plt.figure(figsize=(10,6))
sns.histplot(df['Age'].dropna(), kde=True, bins=20, color = 'skyblue', line_kws={'linewidth': 2})
plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

df['yearmonth'] = df['Date'].dt.strftime('%B')  # %B gives the full month name

popular_categories = df['Product Category'].value_counts()
popular_categories = popular_categories.sort_values(ascending=False)
plt.figure(figsize=(10,6))
plt.bar(popular_categories.index, popular_categories.values, color='skyblue')
plt.title('Amount of Sales by Product Category')
plt.xlabel('Product Category')
plt.ylabel('Amount of Sales')
plt.show()

df['yearmonth'] = pd.Categorical(
    df['yearmonth'],
    categories=['January', 'February', 'March', 'April', 'May', 'June',
                'July', 'August', 'September', 'October', 'November', 'December'],
    ordered=True
)

# Aggregate total sales by month
monthly_sales = df.groupby('yearmonth')['Total Amount'].sum().reset_index()

# Plot sales trends over time
plt.figure(figsize=(10, 6))
sns.lineplot(x='yearmonth', y='Total Amount', data=monthly_sales, marker='o', linewidth=2.5, color='blue')
plt.title('Sales Trend Over Time', fontsize=18)
plt.xlabel('Month', fontsize=14)
plt.ylabel('Total Sales Amount (per month)', fontsize=14)
plt.xticks(rotation=45, fontsize=12)
plt.yticks(fontsize=12)
plt.grid(alpha=0.5, linestyle='--')
plt.tight_layout()
plt.show()

df = pd.read_csv('/content/retail_sales_dataset.csv')

df['Date'] = pd.to_datetime(df['Date'])
df['yearmonth'] = df['Date'].dt.strftime('%B')
df['yearmonth'] = pd.Categorical(
    df['yearmonth'],
    categories=['January', 'February', 'March', 'April', 'May', 'June',
                'July', 'August', 'September', 'October', 'November', 'December'],
    ordered=True
)

# Group by Month and count the number of transactions
transaction_count = df.groupby('yearmonth')['Transaction ID'].count()

plt.figure(figsize=(10, 6))
sns.lineplot(x=transaction_count.index, y=transaction_count.values, marker='o', linewidth=2.5, color='blue')
plt.title('Transaction Frequency Over Months', fontsize=18)
plt.xlabel('yearmonth', fontsize=14)
plt.ylabel('Transaction Count', fontsize=14)
plt.xticks(ticks=range(1, 13), labels=[
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'], rotation=45, fontsize=12)
plt.yticks(fontsize=12)
plt.grid(alpha=0.5, linestyle='--')
plt.tight_layout()
plt.show()

# Plot the transaction frequency as a bar plot
plt.figure(figsize=(10, 6))
sns.barplot(
    x=transaction_count.index,
    y=transaction_count.values,
    palette='coolwarm'
)

plt.title('Transaction Frequency Over Months', fontsize=18, fontweight='bold')
plt.xlabel('Month', fontsize=14)
plt.ylabel('Transaction Count', fontsize=14)

plt.xticks(
    ticks=range(12),
    labels=[
        'January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'
    ],
    rotation=45, fontsize=12
)
plt.yticks(fontsize=12)

# Add gridlines for better readability
plt.grid(axis='y', alpha=0.5, linestyle='--')

# Add values on top of bars for better insights
for index, value in enumerate(transaction_count.values):
    plt.text(index, value + 4, str(value), ha='center', fontsize=14, color='black')

# Adjust layout and display the plot
plt.tight_layout()
plt.show()

df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
df['Month'] = df['Date'].dt.month_name()

print("Months by Names in the Dataset:")
print(df['Month'].unique())

# Create a pivot table for the heatmap
heatmap_data = df.pivot_table(
    index='Month',
    columns='Product Category',
    values='Total Amount',
    aggfunc='sum'
)

# Ensure the months are ordered correctly in the heatmap
heatmap_data = heatmap_data.reindex([
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
])

# Plot the heatmap
plt.figure(figsize=(14, 8))
sns.heatmap(
    heatmap_data,
    annot=True,
    fmt='.0f',
    cmap='RdYlBu',
    linewidths=0.5,
    cbar_kws={'label': 'Total Sales Amount'}
)
plt.title('Sales Heatmap of Product Categories Per Month', fontsize=18, fontweight='bold')
plt.xlabel('Product Category', fontsize=14)
plt.ylabel('Month', fontsize=14)
plt.xticks(fontsize=12, rotation=45)
plt.yticks(fontsize=12)
plt.tight_layout()
plt.show()

age_bins = [0, 18, 25, 35, 50, 100]
age_labels = ['Child (0-18)', 'Youth (19-25)', 'Adult (26-35)', 'Middle-Aged (36-50)', 'Senior (50+)']

# Create a new column 'Age Group' with the age bins
df['Age Group'] = pd.cut(
    df['Age'],
    bins=age_bins,
    labels=age_labels,
)

# Verify the creation of the 'Age Group' column
print("Age Group Binning Completed:")
print(df[['Age', 'Age Group']].head())
df.head()

# Aggregate data by Age Group and Product Category
stacked_data = df.groupby(['Age Group', 'Product Category'])['Quantity'].sum().unstack()

stacked_data.plot(
    kind='barh',
    stacked=True,
    figsize=(10, 6),
    colormap='coolwarm'  # Use a visually distinct colormap
)

plt.title('Product Categories Purchased by Age Group (Stacked Horizontal)', fontsize=18, fontweight='bold')
plt.xlabel('Quantity Purchased', fontsize=14)
plt.ylabel('Age Group', fontsize=14)

plt.xticks(fontsize=12)
plt.yticks(fontsize=12)

plt.legend(title='Product Category', title_fontsize=14, fontsize=12, loc='upper right')

plt.tight_layout()
plt.show()

# Calculate monthly revenue totals
monthly_totals = df.groupby('yearmonth')['Total Amount'].sum().reset_index()

# Ensure the months are ordered correctly
monthly_totals['yearmonth'] = pd.Categorical(
    monthly_totals['yearmonth'],
    categories=['January', 'February', 'March', 'April', 'May', 'June',
                'July', 'August', 'September', 'October', 'November', 'December'],
    ordered=True
)

# Create the bar plot
plt.figure(figsize=(14, 8))
bars = sns.barplot(
    x='yearmonth',
    y='Total Amount',
    data=monthly_totals,
    palette='magma'
)

# Add labels and title
plt.title('Monthly Revenue Trends', fontsize=20, fontweight='bold', color='#333333')
plt.xlabel('Month', fontsize=16)
plt.ylabel('Revenue', fontsize=16)

# Annotate bar values
for bar, total in zip(bars.patches, monthly_totals['Total Amount']):
    plt.text(
        bar.get_x() + bar.get_width() / 2,
        bar.get_height() + 1000,
        f"{total:,.0f}",
        ha='center',
        fontsize=12,
        color='black'
    )

plt.xticks(rotation=45, ha='right', fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.5)

# Remove unnecessary spines
sns.despine(left=True, bottom=True)

plt.tight_layout()
plt.show()

df_dummies = pd.get_dummies(data=df, columns=['Gender', 'Product Category'])

#The correlation heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(df_dummies.corr(numeric_only=True), cmap='RdYlGn', annot=False)
plt.title("Correlation Heatmap")
plt.show()

"""# **Linear Regression Model**"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# ---  Define Dependent and Independent Variables ---
y = df_dummies['Total Amount']
X = df_dummies[['Age', 'Quantity', 'Price per Unit',
                'Gender_Female', 'Gender_Male',
                'Product Category_Beauty',
                'Product Category_Clothing',
                'Product Category_Electronics']]

# --- Split Data into Training and Testing Sets (80% - 20%) ---
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ---  Initialize and Fit the Linear Regression Model ---
model = LinearRegression()
model.fit(X_train, y_train)

# ---  Make Predictions ---
y_pred = model.predict(X_test)

# ---  Plot Actual vs. Predicted Values ---
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, c=abs(y_test - y_pred), cmap='coolwarm', alpha=0.5, label='Error Magnitude')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2, label='Perfect Prediction')
plt.title('Actual vs. Predicted Total Amount', fontsize=14)
plt.xlabel('Actual Total Amount', fontsize=12)
plt.ylabel('Predicted Total Amount', fontsize=12)
plt.legend()
plt.colorbar(label='Error Magnitude')
plt.tight_layout()
plt.show()

# ---  Evaluate Model Performance ---
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)
print(f'Mean Squared Error: {mse}')
print(f'Root Mean Squared Error: {rmse}')
print(f'R-squared: {r2}')